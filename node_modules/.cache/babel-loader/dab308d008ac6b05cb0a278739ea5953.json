{"ast":null,"code":"var _jsxFileName = \"/home/spx110/Desktop/BAZAR/my-app/src/Component/AutoSuggest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Autosuggest from 'react-autosuggest';\nimport SearchBarAction from '../Store/Action/SearchBarAction';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AutosuggestComp = () => {\n  _s();\n\n  const [value, setValue] = useState(\"\");\n  const [suggestions, setSuggestions] = useState([]);\n  const [selected, setSelected] = useState(\"\");\n  const allItems = useSelector(state => state.SearchBarReducer.SearchBarData);\n  console.log(allItems);\n  const dispatch = useDispatch(); // let history = useHistory();\n\n  const getSuggestionValue = suggestion => suggestion.Title;\n\n  const getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    return inputLength === 0 ? [] : allItems.filter(item => item.Title.toLowerCase().slice(0, inputLength) === inputValue);\n  }; // const raw = (suggestion) => {\n  //     if (value.length > 0) {\n  //         <div>{suggestion.Title}</div>\n  //     }\n  // }\n\n\n  const renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(Link, {\n    to: `/products/${suggestion.Title}/${suggestion.categoryData.slug}/`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: suggestion.Title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 120\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 44\n  }, this);\n\n  const onChange = (event, _ref) => {\n    let {\n      newValue\n    } = _ref;\n    setValue(newValue);\n    SearchBarAction(dispatch, {\n      searchValue: newValue\n    });\n  }; // const keyPressHandler = (e) => {\n  //     if (e.which === 13) {\n  //         // alert(\"You pressed enter!\");\n  //         history.push(value);\n  //     }\n  // };\n\n\n  const onSuggestionsFetchRequested = _ref2 => {\n    let {\n      value\n    } = _ref2;\n    setSuggestions(getSuggestions(value));\n  };\n\n  console.log(suggestions);\n\n  const onSuggestionsClearRequested = () => setSuggestions([]);\n\n  const onSuggestionSelected = (event, _ref3) => {\n    let {\n      suggestion\n    } = _ref3;\n    setSelected(suggestion.Title);\n  };\n\n  const inputProps = {\n    placeholder: \"Type a character name\",\n    value,\n    onChange\n  };\n  return /*#__PURE__*/_jsxDEV(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: onSuggestionsFetchRequested,\n    onSuggestionsClearRequested: onSuggestionsClearRequested,\n    onSuggestionSelected: onSuggestionSelected,\n    getSuggestionValue: getSuggestionValue,\n    renderSuggestion: renderSuggestion,\n    inputProps: inputProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AutosuggestComp, \"sVzf9J+7qCvGuFFznMCZ/uBTMAE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = AutosuggestComp;\nexport default AutosuggestComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutosuggestComp\");","map":{"version":3,"sources":["/home/spx110/Desktop/BAZAR/my-app/src/Component/AutoSuggest.js"],"names":["React","useState","useHistory","useSelector","Link","Autosuggest","SearchBarAction","useDispatch","AutosuggestComp","value","setValue","suggestions","setSuggestions","selected","setSelected","allItems","state","SearchBarReducer","SearchBarData","console","log","dispatch","getSuggestionValue","suggestion","Title","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","filter","item","slice","renderSuggestion","categoryData","slug","onChange","event","newValue","searchValue","onSuggestionsFetchRequested","onSuggestionsClearRequested","onSuggestionSelected","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Autosuggest from 'react-autosuggest';\nimport SearchBarAction from '../Store/Action/SearchBarAction'\nimport { useDispatch } from 'react-redux'\n\n\n\n\nconst AutosuggestComp = () => {\n    const [value, setValue] = useState(\"\");\n    const [suggestions, setSuggestions] = useState([]);\n    const [selected, setSelected] = useState(\"\");\n    const allItems = useSelector(state => state.SearchBarReducer.SearchBarData)\n    console.log(allItems)\n    const dispatch = useDispatch()\n    // let history = useHistory();\n    const getSuggestionValue = suggestion => suggestion.Title;\n\n    const getSuggestions = value => {\n        const inputValue = value.trim().toLowerCase();\n        const inputLength = inputValue.length;\n\n        return inputLength === 0\n            ? []\n            : allItems.filter(\n                item => item.Title.toLowerCase().slice(0, inputLength) === inputValue\n            );\n    };\n\n    // const raw = (suggestion) => {\n    //     if (value.length > 0) {\n    //         <div>{suggestion.Title}</div>\n    //     }\n    // }\n\n    const renderSuggestion = suggestion => <Link to={`/products/${suggestion.Title}/${suggestion.categoryData.slug}/`}><div>{suggestion.Title}</div></Link>;\n\n    const onChange = (event, { newValue }) => {\n        setValue(newValue);\n        SearchBarAction(dispatch, { searchValue: newValue })\n\n    };\n    // const keyPressHandler = (e) => {\n    //     if (e.which === 13) {\n    //         // alert(\"You pressed enter!\");\n    //         history.push(value);\n    //     }\n    // };\n\n    const onSuggestionsFetchRequested = ({ value }) => {\n        setSuggestions(getSuggestions(value));\n    };\n    console.log(suggestions)\n    const onSuggestionsClearRequested = () => setSuggestions([]);\n\n    const onSuggestionSelected = (event, { suggestion }) => {\n        setSelected(suggestion.Title);\n    };\n\n    const inputProps = {\n        placeholder: \"Type a character name\",\n        value,\n        onChange\n    };\n    return (\n        <Autosuggest\n            suggestions={suggestions}\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\n            onSuggestionSelected={onSuggestionSelected}\n            getSuggestionValue={getSuggestionValue}\n            renderSuggestion={renderSuggestion}\n\n            inputProps={inputProps}\n        />\n    )\n}\n\nexport default AutosuggestComp;"]},"metadata":{},"sourceType":"module"}