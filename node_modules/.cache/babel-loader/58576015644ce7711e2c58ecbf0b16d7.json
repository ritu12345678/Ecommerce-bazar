{"ast":null,"code":"var _jsxFileName = \"/home/spx110/Desktop/BAZAR/my-app/src/AutoComplete.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport SearchBarAction from \"./Store/Action/SearchBarAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AutoComplete = _ref => {\n  _s();\n\n  let {\n    suggestions\n  } = _ref;\n  const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n  const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const userInput = e.target.value;\n    SearchBarAction(dispatch, input); // Filter our suggestions that don't contain the user's input\n    // const unLinked = suggestions.filter(\n    //     (suggestion) =>\n    //         suggestion.toString().toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    // );\n\n    setInput(e.target.value);\n    setFilteredSuggestions(unLinked);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(true);\n  };\n\n  const onClick = e => {\n    setFilteredSuggestions([]);\n    setInput(e.target.innerText);\n    setActiveSuggestionIndex(0);\n    setShowSuggestions(false);\n  };\n\n  const SuggestionsListComponent = () => {\n    return filteredSuggestions.length ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions\",\n      children: filteredSuggestions.map((suggestion, index) => {\n        let className; // Flag the active suggestion with a class\n\n        if (index === activeSuggestionIndex) {\n          className = \"suggestion-active\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: className,\n          onClick: onClick,\n          children: suggestion\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-suggestions\",\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"No suggestions, you're on your own!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: onChange // onKeyDown={onKeyDown}\n      ,\n      value: input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), showSuggestions && input && /*#__PURE__*/_jsxDEV(SuggestionsListComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AutoComplete, \"+h+LDKZh0HqGFe0uEOAIIxMrLjA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/home/spx110/Desktop/BAZAR/my-app/src/AutoComplete.js"],"names":["useState","SearchBarAction","useSelector","useDispatch","AutoComplete","suggestions","filteredSuggestions","setFilteredSuggestions","activeSuggestionIndex","setActiveSuggestionIndex","showSuggestions","setShowSuggestions","input","setInput","dispatch","onChange","e","userInput","target","value","unLinked","onClick","innerText","SuggestionsListComponent","length","map","suggestion","index","className"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;AAEA,MAAMC,YAAY,GAAG,QAAqB;AAAA;;AAAA,MAApB;AAAEC,IAAAA;AAAF,GAAoB;AACtC,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDP,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM,CAACQ,qBAAD,EAAwBC,wBAAxB,IAAoDT,QAAQ,CAAC,CAAD,CAAlE;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMc,QAAQ,GAAGX,WAAW,EAA5B;;AAEA,QAAMY,QAAQ,GAAIC,CAAD,IAAO;AACpB,UAAMC,SAAS,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA3B;AAEAlB,IAAAA,eAAe,CAACa,QAAD,EAAWF,KAAX,CAAf,CAHoB,CAIpB;AACA;AACA;AACA;AACA;;AAEAC,IAAAA,QAAQ,CAACG,CAAC,CAACE,MAAF,CAASC,KAAV,CAAR;AAEAZ,IAAAA,sBAAsB,CAACa,QAAD,CAAtB;AACAX,IAAAA,wBAAwB,CAAC,CAAD,CAAxB;AACAE,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH,GAfD;;AAgBA,QAAMU,OAAO,GAAIL,CAAD,IAAO;AACnBT,IAAAA,sBAAsB,CAAC,EAAD,CAAtB;AACAM,IAAAA,QAAQ,CAACG,CAAC,CAACE,MAAF,CAASI,SAAV,CAAR;AACAb,IAAAA,wBAAwB,CAAC,CAAD,CAAxB;AACAE,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,GALD;;AAMA,QAAMY,wBAAwB,GAAG,MAAM;AACnC,WAAOjB,mBAAmB,CAACkB,MAApB,gBACH;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA,gBACKlB,mBAAmB,CAACmB,GAApB,CAAwB,CAACC,UAAD,EAAaC,KAAb,KAAuB;AAC5C,YAAIC,SAAJ,CAD4C,CAE5C;;AACA,YAAID,KAAK,KAAKnB,qBAAd,EAAqC;AACjCoB,UAAAA,SAAS,GAAG,mBAAZ;AACH;;AACD,4BACI;AAAI,UAAA,SAAS,EAAEA,SAAf;AAAsC,UAAA,OAAO,EAAEP,OAA/C;AAAA,oBACKK;AADL,WAA+BC,KAA/B;AAAA;AAAA;AAAA;AAAA,gBADJ;AAKH,OAXA;AADL;AAAA;AAAA;AAAA;AAAA,YADG,gBAgBH;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAhBJ;AAoBH,GArBD;;AAsBA,sBACI;AAAA,4BACI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,QAAQ,EAAEZ,QAFd,CAGI;AAHJ;AAII,MAAA,KAAK,EAAEH;AAJX;AAAA;AAAA;AAAA;AAAA,YADJ,EAOKF,eAAe,IAAIE,KAAnB,iBAA4B,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,YAPjC;AAAA,kBADJ;AAWH,CA9DD;;GAAMR,Y;UAKeD,W;;;KALfC,Y;AA+DN,eAAeA,YAAf","sourcesContent":["import { useState } from \"react\";\nimport SearchBarAction from \"./Store/Action/SearchBarAction\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst AutoComplete = ({ suggestions }) => {\n    const [filteredSuggestions, setFilteredSuggestions] = useState([]);\n    const [activeSuggestionIndex, setActiveSuggestionIndex] = useState(0);\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const [input, setInput] = useState(\"\");\n    const dispatch = useDispatch()\n\n    const onChange = (e) => {\n        const userInput = e.target.value;\n\n        SearchBarAction(dispatch, input)\n        // Filter our suggestions that don't contain the user's input\n        // const unLinked = suggestions.filter(\n        //     (suggestion) =>\n        //         suggestion.toString().toLowerCase().indexOf(userInput.toLowerCase()) > -1\n        // );\n\n        setInput(e.target.value);\n\n        setFilteredSuggestions(unLinked);\n        setActiveSuggestionIndex(0);\n        setShowSuggestions(true);\n    };\n    const onClick = (e) => {\n        setFilteredSuggestions([]);\n        setInput(e.target.innerText);\n        setActiveSuggestionIndex(0);\n        setShowSuggestions(false);\n    };\n    const SuggestionsListComponent = () => {\n        return filteredSuggestions.length ? (\n            <ul className=\"suggestions\">\n                {filteredSuggestions.map((suggestion, index) => {\n                    let className;\n                    // Flag the active suggestion with a class\n                    if (index === activeSuggestionIndex) {\n                        className = \"suggestion-active\";\n                    }\n                    return (\n                        <li className={className} key={index} onClick={onClick}>\n                            {suggestion}\n                        </li>\n                    );\n                })}\n            </ul>\n        ) : (\n            <div className=\"no-suggestions\">\n                <em>No suggestions, you're on your own!</em>\n            </div>\n        );\n    };\n    return (\n        <>\n            <input\n                type=\"text\"\n                onChange={onChange}\n                // onKeyDown={onKeyDown}\n                value={input}\n            />\n            {showSuggestions && input && <SuggestionsListComponent />}\n        </>\n    );\n};\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}